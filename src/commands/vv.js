import { downloadContentFromMessage } from '@whiskeysockets/baileys';

const botUser = '50944727644@s.whatsapp.net'; // Remplace avec le JID du propri√©taire du bot

console.log("le proprietaire du bot : ", botUser);
export default {
  name: 'vv',
  aliases: ['rvo2', 'vv2', 'reveal2', 'antiviewonce2'], // synonymes de la commande
  description: 'üîì R√©v√®le un m√©dia √† vue unique (image, vid√©o, audio) et l‚Äôenvoie au propri√©taire du bot',
  
  execute: async (msg, sock) => {
  try {
    console.log("[‚öôÔ∏è] Ex√©cution de la commande 'viewonce2'...");

    await sock.sendMessage(msg.from, { text: "üîç Analyse du message cit√© en cours..." });

    if (
      !msg.quoted ||
      msg.quoted.type !== 'view_once' ||
      !['imageMessage', 'videoMessage', 'audioMessage'].includes(msg.quoted.mtype)
    ) {
      console.log("[‚ÑπÔ∏è] Aucun m√©dia √† vue unique d√©tect√©.");
      await sock.sendMessage(msg.from, { text: "‚ùå Le message cit√© n'est pas un m√©dia √† vue unique valide." });
      return;
    }

    console.log("[üì•] T√©l√©chargement du m√©dia...");
    await sock.sendMessage(msg.from, { text: "üì• T√©l√©chargement du m√©dia en cours..." });

    const mediaMsg = msg.quoted.message;
    const mediaType = Object.keys(mediaMsg)[0];
    const caption = mediaMsg[mediaType].caption || '';
    const newCaption = `${caption}\n\n> HITBOT ¬© 2025`;

    const stream = await downloadContentFromMessage(
      mediaMsg[mediaType],
      mediaType === 'imageMessage' ? 'image' :
      mediaType === 'videoMessage' ? 'video' : 'audio'
    );

    let buffer = Buffer.from([]);
    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk]);
    }

    console.log(`[üì§] Envoi du m√©dia au propri√©taire : ${botUser}`);
    await sock.sendMessage(msg.from, { text: "üì§ Envoi du m√©dia au propri√©taire..." });

    const messageOptions = {
      contextInfo: {
        forwardingScore: 9999,
        isForwarded: false,
      },
    };

    if (/video/.test(mediaType)) {
      await sock.sendMessage(botUser, { video: buffer, caption: newCaption, ...messageOptions });
    } else if (/image/.test(mediaType)) {
      await sock.sendMessage(botUser, { image: buffer, caption: newCaption, ...messageOptions });
    } else if (/audio/.test(mediaType)) {
      await sock.sendMessage(botUser, { audio: buffer, mimetype: 'audio/mp4', ptt: true, ...messageOptions });
    }

    console.log(`[‚úÖ] Envoi termin√©. Suppression du message de commande.`);
    await sock.sendMessage(msg.from, { text: "‚úÖ Fichier transf√©r√© avec succ√®s. Suppression du message..." });

    await sock.deleteMessage(msg.from, {
      id: msg.id,
      remoteJid: msg.from,
      fromMe: true,
    });

  } catch (err) {
    console.error('‚ùå Erreur dans le plugin viewonce2 :', err);
    await sock.sendMessage(msg.from, {
      text: `‚ùå Une erreur est survenue : ${err.message || err}`,
    });
  }
}
}