// HITBOT - WhatsApp Bot using Baileys
import {
  makeWASocket,
  useMultiFileAuthState,
  DisconnectReason,
  fetchLatestBaileysVersion
} from '@whiskeysockets/baileys';
import { Boom } from '@hapi/boom';
import qrcode from 'qrcode-terminal';
import figlet from 'figlet';
import chalk from 'chalk';
import ora from 'ora';
import { handleMessage } from './handlers.js';

console.clear();

// Affichage du logo
try {
  console.log(chalk.green(figlet.textSync("HITBOT", { horizontalLayout: 'full' })));
} catch (err) {
  console.error(chalk.red('‚ùå Erreur lors de l‚Äôaffichage du logo :'), err);
}

async function startBot() {
  const spinner = ora('üîÑ Initialisation de HITBOT...').start();

  try {
    const { state, saveCreds } = await useMultiFileAuthState('auth_info');

    const { version, isLatest } = await fetchLatestBaileysVersion();
    console.log(chalk.blue(`üì¶ Version Baileys: ${version.join('.')}, derni√®re version: ${isLatest ? 'Oui' : 'Non'}`));

    const sock = makeWASocket({
      version,
      auth: state,
      printQRInTerminal: false,
      browser: ['HITBOT', 'Chrome', '1.0.0'],
      syncFullHistory: false, // Multi-device : √©viter de tout synchroniser pour aller plus vite
    });

    // üîê Sauvegarde des credentials automatiquement
    sock.ev.on('creds.update', async () => {
      try {
        await saveCreds();
      } catch (err) {
        console.error('‚ùå Erreur lors de la sauvegarde des identifiants :', err);
      }
    });

    // üîó Connexion et QR Code
    sock.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update;

      if (qr) {
        console.log(chalk.yellow('[QR Code] Scannez ce QR pour vous connecter √† WhatsApp :'));
        qrcode.generate(qr, { small: true });
      }

      if (connection === 'close') {
        const isBoom = lastDisconnect?.error instanceof Boom;
        const shouldReconnect = isBoom
          ? lastDisconnect.error.output?.statusCode !== DisconnectReason.loggedOut
          : true;

        console.log(chalk.red('‚ùå D√©connect√© de WhatsApp'));
        if (isBoom) {
          console.log(chalk.red('üìõ Raison :'), lastDisconnect.error.message);
        }

        if (shouldReconnect) {
          console.log(chalk.cyan('üîÅ Tentative de reconnexion...'));
          return startBot();
        } else {
          console.log(chalk.redBright('üîí D√©connect√© d√©finitivement. Re-scan du QR n√©cessaire.'));
        }
      } else if (connection === 'open') {
        spinner.succeed('‚úÖ Connexion r√©ussie √† WhatsApp');
        console.log(
          chalk.greenBright.bold("üåü HITBOT CONNECT√â üåü") +
          chalk.white("\nStatut: ") + chalk.green("R√©ussi ‚úÖ") +
          chalk.cyanBright("\nüéâ SUIVEZ POUR PLUS DE MISES √Ä JOUR üéâ") +
          chalk.blue("\nüì¢ Canal: ") + chalk.underline.blue("https://whatsapp.com/channel/0029VaDAkV9FHWqAMMHvb40b")
        );

        try {
          await sock.sendMessage(sock.user.id, {
            text: `üåü HITBOT CONNECT√â üåü\nStatut: R√©ussi ‚úÖ\nüéâ Merci d‚Äôutiliser HITBOT üéâ\nüì¢ Canal: https://whatsapp.com/channel/0029VaDAkV9FHWqAMMHvb40b`
          });
        } catch (err) {
          console.error('‚ùå Erreur lors de l‚Äôenvoi du message de confirmation :', err);
        }
      }
    });

   // ‚úÖ Auto-vu & r√©action aux statuts avec gestion d'erreur robuste

    sock.ev.on('messages.upsert', async (update) => {
        try {
            const msg = update.messages[0];
            if (!msg || !msg.key || !msg.key.remoteJid) {
                console.warn('Message vide ou cl√© manquante, aucune action.');
                return;
            }

            // V√©rifiez si le message vient des statuts
            if (msg.key.remoteJid === 'status@broadcast') {
                // Tableau d'emojis pour les r√©actions al√©atoires
                const emojis = [
                    'üíö', 'üî•', 'üòä', 'üéâ', 'üëç', 'üí´', 'ü•≥', '‚ú®',
                    'üòé', 'üåü', '‚ù§Ô∏è', 'üòÇ', 'ü§î', 'üòÖ', 'üôå', 'üëè',
                    'üí™', 'ü§©', 'üé∂', 'üíú', 'üëÄ', 'ü§ó', 'ü™Ñ', 'üòã',
                    'ü§ù', 'ü•∞', 'üòª', 'üÜí', 'üôà', 'üòá', 'üéà', 'ü•≥', 
                    'üßê', 'ü•∂', '‚ò†Ô∏è', 'ü§ì', 'ü§ñ', 'üëΩ', 'üêº', 'üá≠üáπ'
                ];

                // Choisir un emoji al√©atoire
                const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

                // ‚úÖ Correction importante : enlever les options invalides qui causent EKEYTYPE
                await sock.sendMessage(
                    msg.key.remoteJid,
                    { react: { key: msg.key, text: randomEmoji } }
                );

                console.log("‚úÖ Statut vu et r√©agi avec succ√®s :", randomEmoji);
            }
        } catch (err) {
            // Gestion sp√©cifique de l'erreur EKEYTYPE
            if (err.errorcode === 'EKEYTYPE') {
                console.error('‚ùå Erreur EKEYTYPE d√©tect√©e (cl√© invalide pour node-cache)');
            } 
            // Gestion des autres erreurs √©ventuelles
            else {
                console.error('‚ùå Erreur inattendue lors de la r√©action au statut :', err);
            }
        }
    });

    //Message handler
    sock.ev.on('messages.upsert', async ({ messages }) => {
      try {
          const hitbot = messages[0];
          if (!hitbot || !hitbot.message || !hitbot.key || !hitbot.key.remoteJid) {
              console.warn('Message vide, message syst√®me ou cl√© manquante, aucune action.');
              return;
          }

          // V√©rifie s'il s'agit d'un message texte classique
          if (hitbot.message.conversation) {
              const content = hitbot.message.conversation;

              const messageObj = {
                  content,
                  reply: async (text) => {
                      try {
                          await sock.sendMessage(
                              hitbot.key.remoteJid,
                              { text },
                              { quoted: hitbot }
                          );
                      } catch (err) {
                          console.error('‚ùå Erreur lors de l\'envoi de la r√©ponse :', err);
                      }
                  }
              };

              // Appel vers ton handler principal (gestion des commandes, etc.)
              handleMessage(messageObj);
          }
      } catch (err) {
          console.error('‚ùå Erreur inattendue dans messages.upsert :', err);
      }
    });


  } catch (err) {
    spinner.fail('‚ùå √âchec de l‚Äôinitialisation de HITBOT');
    console.error('‚ùå Erreur globale dans startBot :', err);
  }
}

startBot();